export const data = JSON.parse("{\"key\":\"v-07d46f22\",\"path\":\"/zh/guide/interview/1080710-.html\",\"title\":\"python\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"python\",\"icon\":\"circle-info\",\"order\":1080710,\"description\":\"迭代器和生成器的区别 迭代器（Iterators）和生成器（Generators）都是用于处理和访问序列数据的方法，但它们在实现和用法上有一些区别。 迭代器（Iterators） 定义和实现 迭代器是一种对象，它实现了迭代协议（Iterator Protocol），即包含iter()和`next()方法。 iter()方法返回迭代器本身，next()方...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vuepress-theme-hope-docs-demo.netlify.app/zh/guide/interview/1080710-.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"教程\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"python\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"迭代器和生成器的区别 迭代器（Iterators）和生成器（Generators）都是用于处理和访问序列数据的方法，但它们在实现和用法上有一些区别。 迭代器（Iterators） 定义和实现 迭代器是一种对象，它实现了迭代协议（Iterator Protocol），即包含iter()和`next()方法。 iter()方法返回迭代器本身，next()方...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"盖盖\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"python\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"盖盖\\\",\\\"url\\\":\\\"https://github.com/Nikita-GDev\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"迭代器和生成器的区别\",\"slug\":\"迭代器和生成器的区别\",\"link\":\"#迭代器和生成器的区别\",\"children\":[{\"level\":3,\"title\":\"迭代器（Iterators）\",\"slug\":\"迭代器-iterators\",\"link\":\"#迭代器-iterators\",\"children\":[{\"level\":4,\"title\":\"定义和实现\",\"slug\":\"定义和实现\",\"link\":\"#定义和实现\",\"children\":[]},{\"level\":4,\"title\":\"惰性求值\",\"slug\":\"惰性求值\",\"link\":\"#惰性求值\",\"children\":[]},{\"level\":4,\"title\":\"状态维护\",\"slug\":\"状态维护\",\"link\":\"#状态维护\",\"children\":[]}]},{\"level\":3,\"title\":\"生成器（Generators）\",\"slug\":\"生成器-generators\",\"link\":\"#生成器-generators\",\"children\":[{\"level\":4,\"title\":\"定义和实现\",\"slug\":\"定义和实现-1\",\"link\":\"#定义和实现-1\",\"children\":[]},{\"level\":4,\"title\":\"简洁性和内存效率\",\"slug\":\"简洁性和内存效率\",\"link\":\"#简洁性和内存效率\",\"children\":[]},{\"level\":4,\"title\":\"适用场景\",\"slug\":\"适用场景\",\"link\":\"#适用场景\",\"children\":[]}]}]},{\"level\":2,\"title\":\"is和==号的区别\",\"slug\":\"is和-号的区别\",\"link\":\"#is和-号的区别\",\"children\":[{\"level\":3,\"title\":\"is 操作符\",\"slug\":\"is-操作符\",\"link\":\"#is-操作符\",\"children\":[]},{\"level\":3,\"title\":\"== 操作符\",\"slug\":\"操作符\",\"link\":\"#操作符\",\"children\":[]}]},{\"level\":2,\"title\":\"pytest 中如何跳过测试用例\",\"slug\":\"pytest-中如何跳过测试用例\",\"link\":\"#pytest-中如何跳过测试用例\",\"children\":[]},{\"level\":2,\"title\":\"pytest 中如何进行绝对优先\",\"slug\":\"pytest-中如何进行绝对优先\",\"link\":\"#pytest-中如何进行绝对优先\",\"children\":[]},{\"level\":2,\"title\":\"pytest 中如何进行请求头鉴权\",\"slug\":\"pytest-中如何进行请求头鉴权\",\"link\":\"#pytest-中如何进行请求头鉴权\",\"children\":[]}],\"readingTime\":{\"minutes\":3.48,\"words\":1044},\"filePathRelative\":\"zh/guide/interview/1080710-.md\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
